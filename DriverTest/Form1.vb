Imports System.Data.Common
Imports System.IO
Imports System.Net.Http
Imports System.Text.RegularExpressions
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports RestSharp

Public Class Form1

    Private autoGenerated As Boolean = False
    Private viewerOpened As Boolean = False
    Private historyOpened As Boolean = False

#Region "View"
    Public Enum StatusType
        Query = 0
        Connection = 1
    End Enum

    Public Sub changeStatus(type As StatusType, status As String)
        If type = StatusType.Connection Then
            connectionStatus.Text = $"Connection Status: {status}"
        ElseIf type = StatusType.Query Then
            queryStatus.Text = $"Query Status: {status}"
        End If
    End Sub
#End Region

#Region "Tabs"
    Private tabCount As Integer = 1
    Private oldTabSelected As Integer = 1

    Public Function getSelected() As queryTab
        Return tabHolder.SelectedTab.Controls(0)
    End Function

    Private Sub addTab()
        Dim page = New TabPage()
        page.Text = $"Query {tabCount}"
        tabCount += 1
        page.Controls.Add(New queryTab With {.Visible = True, .Dock = DockStyle.Fill})
        tabHolder.TabPages.Add(page)
        tabHolder.SelectedTab = page
    End Sub

    Private Sub addHistoryTab()
        If Not historyOpened Then
            Dim page = New TabPage()
            page.Text = $"Connection History"
            page.Controls.Add(New conHistoryTab With {.Visible = True, .Dock = DockStyle.Fill})
            tabHolder.TabPages.Add(page)
            historyOpened = True
        End If
    End Sub

    Private Sub removeTab()
        If tabHolder.SelectedTab.Text <> $"Connection History" Then
            tabCount -= 1
        Else
            historyOpened = False
        End If
        tabHolder.TabPages.Remove(tabHolder.SelectedTab)

    End Sub
#End Region
    Private Sub autoSelect(sender As Object, e As EventArgs)
        Dim table = sender.Tag
        getSelected().insertQuery($"Select * From [{table}] LIMIT 10;")
    End Sub

    Private Sub autoSelectSystem(sender As Object, e As EventArgs)
        Dim table = sender.Tag
        getSelected().insertQuery($"Select * From [{table}];")
    End Sub

    Private Sub generateView(sender As Object, e As EventArgs)
        Dim table = sender.Tag
        If Not viewerOpened Then
            Dim page = New TabPage($"Viewer")
            page.Name = page.Text
            page.Controls.Add(New viewerTab With {.Visible = True, .Dock = DockStyle.Fill})
            tabHolder.TabPages.Add(page)
            viewerOpened = True
        End If
        Dim vT1 As TabPage = tabHolder.TabPages($"Viewer")
        vT1.Controls(0).GetType().GetMethod("specificDB").Invoke(vT1.Controls(0), New Object() {table})

        tabHolder.SelectedTab = tabHolder.TabPages($"Viewer")
    End Sub

    Public Sub generateAuto()
        Try
            If Not autoGenerated Then
                clearGeneratedAuto()

                Dim allTables As Dictionary(Of String, CDataObject) = Nothing
                allTables = CDataDriver.clone.getObjects()

                For Each table As KeyValuePair(Of String, CDataObject) In allTables
                    Dim name = table.Value.name()
                    Dim type = table.Value.type()
                    Dim item = New ToolStripMenuItem($"{name}", Nothing, AddressOf autoSelect)
                    Dim item1 = New ToolStripMenuItem($"{name}", Nothing, AddressOf generateView)
                    item.Tag = name
                    item1.Tag = name
                    If type = "VIEW" Then
                        ViewsToolStripMenuItem.DropDownItems.Add(item)
                        ViewsToolStripMenuItem1.DropDownItems.Add(item1)
                    ElseIf type = "TABLE" Then
                        TablesToolStripMenuItem.DropDownItems.Add(item)
                        TablesToolStripMenuItem1.DropDownItems.Add(item1)
                    ElseIf type = "SYSTABLE" Then
                        Dim sysitem = New ToolStripMenuItem($"{name}", Nothing, AddressOf autoSelectSystem)
                        sysitem.Tag = name
                        SystemToolStripMenuItem.DropDownItems.Add(sysitem)
                    End If
            Next

                autoGenerated = True
            End If
        Catch ex As Exception
            UI.errorBox(ex.Message, ex.StackTrace)
        End Try
    End Sub

    Public Sub clearGeneratedAuto()
        Try
            If autoGenerated Then
                If SelectToolStripMenuItem1.DropDownItems.Count > 2 Then
                    ViewsToolStripMenuItem.DropDownItems.Clear()
                    TablesToolStripMenuItem.DropDownItems.Clear()
                End If
                autoGenerated = False
            End If
        Catch ex As Exception
            errorBox(ex.Message, ex.StackTrace)
        End Try
    End Sub

    Private Sub execute()
        getSelected().execute()
    End Sub

    Private Sub propertyConnectionString(prop As String, value As String)
        Dim hasIt = New Regex($"{prop}=(.*?);")
        If hasIt.IsMatch(connectionField.Text) Then
            connectionField.Text = Regex.Replace(connectionField.Text, $"{prop}=(.*?);", $"{prop}={value};")
        Else
            connectionField.Text += $"{prop}={value};"
        End If
        If CDataDriver.clone.getProperty(prop) IsNot Nothing Then
            Dim index = CDataDriver.clone.getProperty(prop).getIndex()
            connectionGrid.Rows(index).Cells(1).Value = value
        End If
        connectionField.Text = generateConnectionString(driverField.Text, connectionGrid)
    End Sub

    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Me.tabHolder.TabPages.Insert(1, "New")
        Me.tabHolder.TabPages.Insert(1, "Remove")
        addTab()
        'Dim page = New TabPage()
        'page.Text = $"Start"
        'page.Controls.Add(New startTab With {.Visible = True, .Dock = DockStyle.Fill})
        'tabHolder.TabPages.Add(page)
        'tabHolder.SelectedTab = page

        Me.tabHolder.DrawMode = TabDrawMode.Normal
        ToolStripMenuItem3.Checked = My.Settings.FromatExecute
        'SplitContainer2.Panel2Collapsed = True

        'Dim client = New RestSharp.RestClient("http://localhost:8888")
        'Dim request = New RestRequest(Method.[Get])
        'request.OnAfterRequest = Function(val As HttpResponseMessage)
        '                             Console.WriteLine(val.Content)
        '                         End Function
        'client.ExecuteAsync(request)
    End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        SelectToolStripMenuItem1.PerformClick()
    End Sub

    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
        TestToolStripMenuItem.PerformClick()
    End Sub

    Private Sub AddProxyToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AddProxyToolStripMenuItem.Click
        propertyConnectionString("ProxyPort", "8888")
        propertyConnectionString("ProxyServer", "localhost")
        propertyConnectionString("ProxyAutoDetect", "False")
    End Sub

    Private Sub ChangeSplitToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ChangeSplitToolStripMenuItem.Click
        getSelected().rotateView()
    End Sub

    Private Sub TestToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles TestToolStripMenuItem.Click
        If testConnection(driverField.Text, connectionField.Text) Then
            generateAuto()
        End If
    End Sub

    Private Sub SystablesToolStripMenuItem_Click(sender As Object, e As EventArgs)
        getSelected().insertQuery($"Select * From [sys_tables];")
    End Sub

    Private Sub SelectToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles SelectToolStripMenuItem1.Click
        execute()
    End Sub

    Private Sub GETANDREFRESHToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles GETANDREFRESHToolStripMenuItem.Click
        propertyConnectionString("InitiateOAuth", "GETANDREFRESH")
    End Sub

    Private Sub REFRESHToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles REFRESHToolStripMenuItem.Click
        propertyConnectionString("InitiateOAuth", "REFRESH")
    End Sub

    Private Sub driverField_SelectedIndexChanged(sender As Object, e As EventArgs) Handles driverField.SelectedIndexChanged
        Try
            CDataDriver.clearClone()

            Dim factory = DbProviderFactories.GetFactory(driverField.Text)
            connectionGrid.DataSource = Nothing
            connectionGrid.Refresh()
            connectionField.Clear()
            Dim table As DataTable = New DataTable()
            table.Columns.Add("PropertyName")
            table.Columns.Add("Value")
            Try
                Using connection As DbConnection = factory.CreateConnection()
                    connection.ConnectionString = connectionField.Text
                    connection.Open()

                    Dim command As DbCommand = factory.CreateCommand()
                    command.CommandText = $"select 
                ,CASE 
                    WHEN Visible = True
                        And Category <> ''
                        THEN Category
                    WHEN Visible = True
                        And Category = ''
                        THEN 'Miscellaneous'
                    WHEN Visible = False
                        THEN 'ZZNotVisible'
                    Else 'Other'
                End Category
                ,PropertyName
                ,DEFAULT Value
                From sys_connection_props
                Order By Category;"
                    command.Connection = connection
                    Dim adapter As DbDataAdapter = factory.CreateDataAdapter()
                    adapter.SelectCommand = command
                    Dim tableTemp As DataTable = New DataTable()
                    adapter.Fill(tableTemp)
                    Dim category As String = ""
                    For Each row As DataRow In tableTemp.Rows
                        Dim propCategory = row("Category").ToString()
                        Dim propName = row("PropertyName").ToString()
                        Dim propVal = row("Value").ToString()
                        If category <> propCategory Then
                            table.Rows.Add(New String() {$"# {propCategory.Replace("ZZ", "")}", ""})
                            category = propCategory
                        End If
                        Dim index = table.Rows.Add(New String() {propName, propVal})
                        CDataDriver.clone.addProperty(propName, table.Rows.Count - 1, propVal)
                    Next

                End Using

            Catch ex1 As Exception
                table.Rows.Add(New String() {$"# All", ""})

                For Each key In factory.CreateConnectionStringBuilder().Keys
                    key = key.Replace(" ", "")
                    Dim defaultVal = factory.CreateConnectionStringBuilder()(key)
                    Dim index = table.Rows.Add(New String() {key, defaultVal})
                    CDataDriver.clone.addProperty(key, table.Rows.Count - 1, defaultVal)
                Next
            End Try

            connectionGrid.DataSource = table
            connectionGrid.Columns(0).AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill
            connectionGrid.Columns(0).FillWeight = 50
            connectionGrid.Columns(0).ReadOnly = True
            connectionGrid.Columns(0).SortMode = DataGridViewColumnSortMode.Programmatic
            connectionGrid.Columns(1).AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill
            connectionGrid.Columns(1).FillWeight = 50
            connectionGrid.Columns(1).SortMode = DataGridViewColumnSortMode.NotSortable


            Dim ConnectionHistory = JToken.Parse(My.Settings.ConnectionHistory)
            If ConnectionHistory(driverField.Text) IsNot Nothing Then
                Dim result As DialogResult = MessageBox.Show("Use previous settings?",
                              "Connection String Settings",
                              MessageBoxButtons.YesNo)

                If (result = DialogResult.Yes) Then
                    connectionField.Text = ConnectionHistory(driverField.Text)
                    Try
                        If testConnection(driverField.Text, connectionField.Text) Then
                            generateAuto()
                        End If
                    Catch ex As Exception

                    End Try

                End If
            End If

        Catch ex As Exception
            errorBox(ex.Message, ex.StackTrace)
        End Try
    End Sub

    Private Sub connectionGrid_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles connectionGrid.CellEndEdit
        Dim key = connectionGrid.Rows(e.RowIndex).Cells(0).Value
        Dim val = connectionGrid.Rows(e.RowIndex).Cells(1).Value
        If val IsNot Nothing And Not IsDBNull(val) AndAlso (val <> "" And val <> " ") Then
            If val.ToString() <> CDataDriver.clone.getProperty(key).getValue() Then
                propertyConnectionString(key, val)
                connectionGrid.Rows(e.RowIndex).Cells(1).Style.Font = New Font("Microsoft Sans Serif", 8, FontStyle.Bold)
            Else
                connectionField.Text = Regex.Replace(connectionField.Text, $"{key}=(.*?);", $"")
                connectionGrid.Rows(e.RowIndex).Cells(1).Style.Font = New Font("Microsoft Sans Serif", 8, FontStyle.Regular)
            End If
        End If
    End Sub

    Private Sub NewTabToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NewTabToolStripMenuItem.Click
        addTab()
    End Sub

    Private Sub RemoveTabToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles RemoveTabToolStripMenuItem.Click
        removeTab()
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Clipboard.SetText(connectionField.Text)
    End Sub

    Private Sub ToolStripMenuItem2_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem2.Click
        getSelected().formatEditor()
    End Sub

    Private Sub ToolStripMenuItem3_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem3.Click
        My.Settings.FromatExecute = ToolStripMenuItem3.Checked
        My.Settings.Save()
    End Sub

    Private Sub connectionField_TextChanged(sender As Object, e As EventArgs) Handles connectionField.TextChanged
        Dim allProperties As String() = connectionField.Text.Split(";")

        For Each row In connectionGrid.Rows
            If row.Index > 0 Then
                If Not row.Cells(0).Value.ToString().Contains("#") Then
                    Dim index = Array.FindIndex(allProperties, Function(x) x.Split("=")(0) = row.Cells(0).Value.ToString())
                    If index > -1 Then
                        Dim prop = allProperties(index).Split("=")
                        row.Cells(1).Value = prop(1)
                        row.Cells(1).Style.Font = New Font("Microsoft Sans Serif", 8, FontStyle.Bold)
                    Else
                        Try
                            row.Cells(1).Value = CDataDriver.clone.getProperty(row.Cells(0).Value.ToString()).getValue()
                            row.Cells(1).Style.Font = New Font("Microsoft Sans Serif", 8, FontStyle.Regular)
                        Catch ex As Exception

                        End Try
                    End If
                End If
            End If
        Next


        'For Each row In connectionGrid.Rows
        '    If Array.Find(allProperties, Function(x) x.Split("=")(0) = row("PropertyName")) IsNot Nothing Then
        '        Try
        '            Dim prop = row.Split("=")
        '            If connectionProperty.ContainsKey(prop(0)) Then
        '                Dim index = connectionProperty(prop(0))
        '                connectionGrid.Rows(index).Cells(1).Value = prop(1)
        '                connectionGrid.Rows(index).Cells(1).Style.Font = New Font("Microsoft Sans Serif", 8, FontStyle.Bold)

        '            End If
        '        Catch ex As Exception

        '        End Try
        '    Else
        '        row.Cells(1).Style.Font = New Font("Microsoft Sans Serif", 8, FontStyle.Regular)
        '    End If

        'Next
    End Sub

    Private Sub ConnectionHistoryToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ConnectionHistoryToolStripMenuItem.Click
        addHistoryTab()
    End Sub

    Private Sub AddLogVerbosity3ToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AddLogVerbosity3ToolStripMenuItem.Click
        Dim desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop)
        Dim today = Date.Now()
        Dim driverName = driverField.Text.Split(".")(3)
        Dim path = $"{desktopPath}\CDataLogs\{driverName}"
        If Not System.IO.Directory.Exists(path) Then
            System.IO.Directory.CreateDirectory(path)
        End If
        propertyConnectionString("Logfile", $"{path}\{driverName}_{today.ToString("yyyy-MM-dd")}.log")
        propertyConnectionString("Verbosity", $"3")
    End Sub

    Private Sub AddLogVerbosity5ToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AddLogVerbosity5ToolStripMenuItem.Click
        Dim desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop)
        Dim today = Date.Now()
        Dim driverName = driverField.Text.Split(".")(3)
        Dim path = $"{desktopPath}\CDataLogs\{driverName}"
        If Not System.IO.Directory.Exists(path) Then
            System.IO.Directory.CreateDirectory(path)
        End If
        propertyConnectionString("Logfile", $"{path}\{driverName}_{today.ToString("yyyy-MM-dd")}.log")
        propertyConnectionString("Verbosity", $"5")
    End Sub

    'Private Sub tabHolder_DrawItem(sender As Object, e As DrawItemEventArgs) Handles tabHolder.DrawItem
    '    Dim tabPage = Me.tabHolder.TabPages(e.Index)
    '    Dim tabRect = Me.tabHolder.GetTabRect(e.Index)
    '    tabRect.Inflate(-2, -2)

    '    If e.Index = Me.tabHolder.TabCount - 1 Then
    '        Dim addImage = My.Resources.addTab
    '        e.Graphics.DrawImage(addImage, Convert.ToSingle(tabRect.Left + (tabRect.Width - addImage.Width) / 2), Convert.ToSingle(tabRect.Top + (tabRect.Height - addImage.Height) / 2))
    '    Else
    '        Dim closeImage = My.Resources.closeTab
    '        e.Graphics.DrawImage(closeImage, Convert.ToSingle(tabRect.Right - closeImage.Width), Convert.ToSingle(tabRect.Top + (tabRect.Height - closeImage.Height) / 2))
    '        TextRenderer.DrawText(e.Graphics, tabPage.Text, tabPage.Font, tabRect, tabPage.ForeColor, TextFormatFlags.Left)
    '    End If
    'End Sub

    Private Sub tabHolder_Selecting(ByVal sender As Object, ByVal e As TabControlCancelEventArgs) Handles tabHolder.Selecting
        If e.TabPageIndex = 0 Then
            addTab()
            tabHolder.SelectedIndex = tabHolder.TabCount
        ElseIf e.TabPageIndex = 1 Then
            tabCount -= 1
            If tabHolder.TabPages(oldTabSelected).Text = $"Connection History" Then
                historyOpened = False
            End If
            tabHolder.TabPages.RemoveAt(oldTabSelected)
            If oldTabSelected = 2 Then
                addTab()
            End If
        Else
            oldTabSelected = e.TabPageIndex
        End If
    End Sub

    Private Sub tabHolder_Selected(sender As Object, e As TabControlEventArgs) Handles tabHolder.Selected
        If sender.SelectedIndex = 1 Then
            tabHolder.SelectedIndex = tabHolder.TabCount - 1
        End If
    End Sub

    'Private Sub tabHolder_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)

    '    'Handles tabHolder.MouseDown
    '    Dim lastIndex = Me.tabHolder.TabCount - 1

    '    If Me.tabHolder.GetTabRect(lastIndex).Contains(e.Location) Then
    '        addTab()
    '        Me.tabHolder.SelectedIndex = lastIndex
    '    Else
    '        For i = 0 To Me.tabHolder.TabPages.Count - 1
    '            Dim tabRect = Me.tabHolder.GetTabRect(i)
    '            tabRect.Inflate(-2, -2)
    '            Dim closeImage = My.Resources.closeTab
    '            Dim imageRect = New Rectangle((tabRect.Right - closeImage.Width), tabRect.Top + (tabRect.Height - closeImage.Height) / 2, closeImage.Width, closeImage.Height)

    '            If imageRect.Contains(e.Location) Then
    '                If tabHolder.SelectedTab.Text <> $"Connection History" Then
    '                    tabCount -= 1
    '                Else
    '                    historyOpened = False
    '                End If
    '                Me.tabHolder.TabPages.RemoveAt(i)
    '                Exit For
    '            End If
    '        Next
    '    End If
    'End Sub

    Private Sub FullDBToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles FullDBToolStripMenuItem.Click
        If Not viewerOpened Then
            Dim page = New TabPage($"Viewer")
            page.Name = page.Text
            page.Controls.Add(New viewerTab With {.Visible = True, .Dock = DockStyle.Fill})
            tabHolder.TabPages.Add(page)
            viewerOpened = True
        End If
        Dim vT1 As TabPage = tabHolder.TabPages($"Viewer")
        vT1.Controls(0).GetType().GetMethod("fullDB").Invoke(vT1.Controls(0), Nothing)

        tabHolder.SelectedTab = tabHolder.TabPages($"Viewer")
    End Sub

    Private Sub CloseToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CloseToolStripMenuItem.Click
        If viewerOpened Then
            tabHolder.TabPages.Remove(tabHolder.TabPages($"Viewer"))
            viewerOpened = False
        End If
    End Sub

    Private Sub connectionGrid_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles connectionGrid.CellContentClick

    End Sub

    Private Sub connectionGrid_CellPainting(sender As Object, e As DataGridViewCellPaintingEventArgs) Handles connectionGrid.CellPainting
        If e.RowIndex <> -1 AndAlso connectionGrid.Rows(e.RowIndex).Cells(0).Value.ToString().Contains("# ") Then
            If e.ColumnIndex = 0 Then
                e.AdvancedBorderStyle.Right = DataGridViewAdvancedCellBorderStyle.None
            End If
            connectionGrid.Rows(e.RowIndex).ReadOnly = True
            e.CellStyle.Font = New Font("Microsoft Sans Serif", 9, FontStyle.Bold)
            e.CellStyle.BackColor = SystemColors.Control
            e.CellStyle.SelectionBackColor = e.CellStyle.BackColor
            e.CellStyle.SelectionForeColor = Color.Black
        ElseIf e.RowIndex = -1 Then
            e.CellStyle.BackColor = SystemColors.Control
        End If
    End Sub

    Private Sub driverField_DropDown(sender As Object, e As EventArgs) Handles driverField.DropDown
        driverField.Items.Clear()
        Dim driversTable = DbProviderFactories.GetFactoryClasses()
        driversTable.DefaultView.Sort = "Name ASC"
        driversTable = driversTable.DefaultView.ToTable
        For Each row In driversTable.Rows
            If row("Name").ToString().Contains("CData") Then
                driverField.Items.Add(row("InvariantName"))
            End If
        Next
    End Sub

    Private Sub NewWindowToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NewWindowToolStripMenuItem.Click
        Dim newForm As New Form1
        newForm.Show()
    End Sub

    Private Class QueryCDataFile
        Public driver As String
        Public conString As String
        Public query As String
    End Class

    Private Sub ToolStripMenuItem4_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem4.Click
        SaveFileDialog1.Filter = "CDataQuery Files (*.qucd*)|*.qucd"
        SaveFileDialog1.FileName = $"{tabHolder.SelectedTab.Text}"
        If SaveFileDialog1.ShowDialog() = DialogResult.OK Then
            Dim temp1 = New QueryCDataFile()
            temp1.conString = connectionField.Text
            temp1.driver = driverField.Text
            temp1.query = getSelected().getQuery()
            System.IO.File.WriteAllText(SaveFileDialog1.FileName, JsonConvert.SerializeObject(temp1))
        End If
    End Sub

    Private Sub ToolStripMenuItem5_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem5.Click
        OpenFileDialog1.Filter = "CDataQuery Files (*.qucd*)|*.qucd"
        Dim result As DialogResult = OpenFileDialog1.ShowDialog()
        If result = Windows.Forms.DialogResult.OK Then
            Dim path As String = OpenFileDialog1.FileName
            Try
                Dim text As String = File.ReadAllText(path)
                Dim queryFile As QueryCDataFile = JsonConvert.DeserializeObject(Of QueryCDataFile)(text)
                connectionField.Text = queryFile.conString
                driverField.Text = queryFile.driver
                getSelected().insertQuery(queryFile.query)
            Catch ex As Exception
            End Try
        End If
    End Sub

    Private Sub connectionGrid_CellContentDoubleClick(sender As Object, e As DataGridViewCellEventArgs) Handles connectionGrid.CellContentDoubleClick
        If e.ColumnIndex = 1 Then
            Dim value As String = connectionGrid.Rows(e.RowIndex).Cells(e.ColumnIndex).Value.ToString().ToLower()
            If value = "false" Then
                connectionGrid.Rows(e.RowIndex).Cells(e.ColumnIndex).Value = "True"
            ElseIf value = "true" Then
                connectionGrid.Rows(e.RowIndex).Cells(e.ColumnIndex).Value = "False"
            End If
        End If
    End Sub

    Private Sub MenuStrip1_ItemClicked(sender As Object, e As ToolStripItemClickedEventArgs) Handles MenuStrip1.ItemClicked

    End Sub

    Private Sub ToolStripMenuItem6_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem6.Click
        Dim page = New TabPage()
        page.Text = $"Data View {tabCount}"
        tabCount += 1
        page.Controls.Add(New dataTab With {.Visible = True, .Dock = DockStyle.Fill})
        tabHolder.TabPages.Add(page)
        tabHolder.SelectedTab = page
    End Sub

    Private Sub SystablecolumnsToolStripMenuItem_Click(sender As Object, e As EventArgs)
        getSelected().insertQuery($"Select * From [sys_tablecolumns];")
    End Sub

    Private Sub StoredProcedureToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles StoredProcedureToolStripMenuItem.Click
        StoredProcedure.Show()
    End Sub

    Private Sub SystemToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SystemToolStripMenuItem.Click

    End Sub
End Class

