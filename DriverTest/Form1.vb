Imports System.Data.Common
Imports Newtonsoft.Json.Linq

Public Class Form1

    Private autoGenerated As Boolean = False
    Private viewerOpened As Boolean = False
    Private historyOpened As Boolean = False
    Public connectionProperty As New Dictionary(Of String, Integer)

#Region "View"
    Public Enum StatusType
        Query = 0
        Connection = 1
    End Enum

    Public Sub changeStatus(type As StatusType, status As String)
        If type = StatusType.Connection Then
            connectionStatus.Text = $"Connection Status: {status}"
        ElseIf type = StatusType.Query Then
            queryStatus.Text = $"Query Status: {status}"
        End If
    End Sub
#End Region

#Region "Tabs"
    Private tabCount As Integer = 1
    Private oldTabSelected As Integer = 1

    Private Function getSelected() As queryTab
        Return tabHolder.SelectedTab.Controls(0)
    End Function

    Private Sub addTab()
        Dim page = New TabPage()
        page.Text = $"Query {tabCount}"
        tabCount += 1
        page.Controls.Add(New queryTab With {.Visible = True, .Dock = DockStyle.Fill})
        tabHolder.TabPages.Add(page)
        tabHolder.SelectedTab = page
    End Sub

    Private Sub addHistoryTab()
        If Not historyOpened Then
            Dim page = New TabPage()
            page.Text = $"Connection History"
            page.Controls.Add(New conHistoryTab With {.Visible = True, .Dock = DockStyle.Fill})
            tabHolder.TabPages.Add(page)
            historyOpened = True
        End If
    End Sub

    Private Sub removeTab()
        If tabHolder.SelectedTab.Text <> $"Connection History" Then
            tabCount -= 1
        Else
            historyOpened = False
        End If
        tabHolder.TabPages.Remove(tabHolder.SelectedTab)

    End Sub
#End Region
    Private Sub autoSelect(sender As Object, e As EventArgs)
        Dim table = sender.Tag
        getSelected().insertQuery($"Select * From [{table}] LIMIT 10;")
    End Sub

    Private Sub generateView(sender As Object, e As EventArgs)
        Dim table = sender.Tag
        If Not viewerOpened Then
            Dim page = New TabPage($"Viewer")
            page.Name = page.Text
            page.Controls.Add(New viewerTab With {.Visible = True, .Dock = DockStyle.Fill})
            tabHolder.TabPages.Add(page)
            viewerOpened = True
        End If
        Dim vT1 As TabPage = tabHolder.TabPages($"Viewer")
        vT1.Controls(0).GetType().GetMethod("specificDB").Invoke(vT1.Controls(0), New Object() {table})

        tabHolder.SelectedTab = tabHolder.TabPages($"Viewer")
    End Sub

    Public Sub generateAuto()
        Try
            If Not autoGenerated Then
                clearGeneratedAuto()

                Dim factory = DbProviderFactories.GetFactory(driverField.Text)

                Using connection As DbConnection = factory.CreateConnection()
                    connection.ConnectionString = connectionField.Text
                    connection.Open()

                    Dim command As DbCommand = factory.CreateCommand()
                    command.CommandText = $"Select * From sys_tables LIMIT 10;"
                    command.Connection = connection
                    Dim adapter As DbDataAdapter = factory.CreateDataAdapter()
                    adapter.SelectCommand = command
                    Dim table As DataTable = New DataTable()
                    adapter.Fill(table)
                    For Each row As DataRow In table.Rows
                        Dim name = row("TableName").ToString()
                        Dim type = row("TableType").ToString()
                        Dim item = New ToolStripMenuItem($"{name}", Nothing, AddressOf autoSelect)
                        Dim item1 = New ToolStripMenuItem($"{name}", Nothing, AddressOf generateView)
                        item.Tag = name
                        item1.Tag = name
                        If type = "VIEW" Then
                            ViewsToolStripMenuItem.DropDownItems.Add(item)
                            ViewsToolStripMenuItem1.DropDownItems.Add(item1)
                        ElseIf type = "TABLE" Then
                            TablesToolStripMenuItem.DropDownItems.Add(item)
                            TablesToolStripMenuItem1.DropDownItems.Add(item1)
                        End If
                    Next row

                    autoGenerated = True
                End Using
            End If
        Catch ex As Exception
            UI.errorBox(ex.Message, ex.StackTrace)
        End Try
    End Sub

    Public Sub clearGeneratedAuto()
        Try
            If autoGenerated Then
                If SelectToolStripMenuItem1.DropDownItems.Count > 2 Then
                    ViewsToolStripMenuItem.DropDownItems.Clear()
                    TablesToolStripMenuItem.DropDownItems.Clear()
                End If
                autoGenerated = False
            End If
        Catch ex As Exception
            errorBox(ex.Message, ex.StackTrace)
        End Try
    End Sub

    Private Sub execute()
        getSelected().execute()
    End Sub

    Private Sub propertyConnectionString(prop As String, value As String)
        'Dim hasIt = New Regex($"{prop}=(.*?);")
        'If hasIt.IsMatch(connectionField.Text) Then
        '    connectionField.Text = Regex.Replace(connectionField.Text, $"{prop}=(.*?);", $"{prop}={value};")
        'Else
        '    connectionField.Text += $"{prop}={value};"
        'End If
        If connectionProperty.ContainsKey(prop) Then
            Dim index = connectionProperty(prop)
            connectionGrid.Rows(index).Cells(1).Value = value
        End If
        connectionField.Text = generateConnectionString(driverField.Text, connectionGrid)
    End Sub

    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Me.tabHolder.TabPages.Insert(1, "New")
        Me.tabHolder.TabPages.Insert(1, "Remove")
        addTab()

        Me.tabHolder.DrawMode = TabDrawMode.Normal
        ToolStripMenuItem3.Checked = My.Settings.FromatExecute
        'SplitContainer2.Panel2Collapsed = True
    End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        SelectToolStripMenuItem1.PerformClick()
    End Sub

    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
        TestToolStripMenuItem.PerformClick()
    End Sub

    Private Sub AddProxyToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AddProxyToolStripMenuItem.Click
        propertyConnectionString("ProxyPort", "8888")
        propertyConnectionString("ProxyServer", "localhost")
        propertyConnectionString("ProxyAutoDetect", "False")
    End Sub

    Private Sub ChangeSplitToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ChangeSplitToolStripMenuItem.Click
        getSelected().rotateView()
    End Sub

    Private Sub TestToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles TestToolStripMenuItem.Click
        If testConnection(driverField.Text, connectionField.Text) Then
            generateAuto()
        End If
    End Sub

    Private Sub SystablesToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SystablesToolStripMenuItem.Click
        getSelected().insertQuery($"Select * From [sys_tables] LIMIT 10;")
    End Sub

    Private Sub SelectToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles SelectToolStripMenuItem1.Click
        execute()
    End Sub

    Private Sub GETANDREFRESHToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles GETANDREFRESHToolStripMenuItem.Click
        propertyConnectionString("InitiateOAuth", "GETANDREFRESH")
    End Sub

    Private Sub REFRESHToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles REFRESHToolStripMenuItem.Click
        propertyConnectionString("InitiateOAuth", "REFRESH")
    End Sub

    Private Sub driverField_SelectedIndexChanged(sender As Object, e As EventArgs) Handles driverField.SelectedIndexChanged
        Try
            connectionProperty.Clear()

            Dim factory = DbProviderFactories.GetFactory(driverField.Text)
            connectionGrid.DataSource = Nothing
            connectionGrid.Refresh()
            connectionField.Clear()

            Using connection As DbConnection = factory.CreateConnection()
                connection.ConnectionString = connectionField.Text
                connection.Open()

                Dim command As DbCommand = factory.CreateCommand()
                command.CommandText = $"select 
                ,CASE 
                    WHEN Visible = True
                        And Category <> ''
                        THEN Category
                    WHEN Visible = True
                        And Category = ''
                        THEN 'Miscellaneous'
                    WHEN Visible = False
                        THEN 'ZZNotVisible'
                    Else 'Other'
                End Category
                ,PropertyName
                ,DEFAULT Value
                From sys_connection_props
                Order By Category;"
                command.Connection = connection
                Dim adapter As DbDataAdapter = factory.CreateDataAdapter()
                adapter.SelectCommand = command
                Dim tableTemp As DataTable = New DataTable()
                Dim table As DataTable = New DataTable()
                table.Columns.Add("PropertyName")
                table.Columns.Add("Value")
                adapter.Fill(tableTemp)
                Dim category As String = ""
                For Each row As DataRow In tableTemp.Rows
                    Dim propCategory = row("Category").ToString()
                    Dim propName = row("PropertyName").ToString()
                    Dim propVal = row("Value").ToString()
                    If category <> propCategory Then
                        table.Rows.Add(New String() {$"# {propCategory.Replace("ZZ", "")}", ""})
                        category = propCategory
                    End If
                    Dim index = table.Rows.Add(New String() {propName, propVal})
                    connectionProperty.Add(propName, table.Rows.Count - 1)
                Next
                connectionGrid.DataSource = table
                connectionGrid.Columns(0).AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill
                connectionGrid.Columns(0).FillWeight = 50
                connectionGrid.Columns(0).HeaderCell.Style.BackColor = SystemColors.Control
                connectionGrid.Columns(0).SortMode = DataGridViewColumnSortMode.NotSortable
                connectionGrid.Columns(1).AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill
                connectionGrid.Columns(1).FillWeight = 50
                connectionGrid.Columns(1).HeaderCell.Style.BackColor = SystemColors.Control
                connectionGrid.Columns(1).SortMode = DataGridViewColumnSortMode.NotSortable

                'For Each row As DataRow In table.Rows
                '    Dim name = row("TableName").ToString()
                '    Dim type = row("TableType").ToString()
                '    Dim item = New ToolStripMenuItem($"{name}", Nothing, AddressOf autoSelect)
                '    Dim item1 = New ToolStripMenuItem($"{name}", Nothing, AddressOf generateView)
                '    item.Tag = name
                '    item1.Tag = name
                '    If type = "VIEW" Then
                '        ViewsToolStripMenuItem.DropDownItems.Add(item)
                '        ViewsToolStripMenuItem1.DropDownItems.Add(item1)
                '    ElseIf type = "TABLE" Then
                '        TablesToolStripMenuItem.DropDownItems.Add(item)
                '        TablesToolStripMenuItem1.DropDownItems.Add(item1)
                '    End If
                'Next row
            End Using




            ' Dim neeList = From item In factory.CreateConnectionStringBuilder().Keys Order By item.Key
            'For Each key In factory.CreateConnectionStringBuilder().Keys
            '    Dim defaultVal = factory.CreateConnectionStringBuilder().Item(key)
            '    Dim index = connectionGrid.Rows.Add(New String() {key, defaultVal})
            '    connectionProperty.Add(key, index)
            'Next

            Dim ConnectionHistory = JToken.Parse(My.Settings.ConnectionHistory)
            If ConnectionHistory(driverField.Text) IsNot Nothing Then
                Dim result As DialogResult = MessageBox.Show("Use previous settings?",
                              "Connection String Settings",
                              MessageBoxButtons.YesNo)

                If (result = DialogResult.Yes) Then
                    connectionField.Text = ConnectionHistory(driverField.Text)
                    If testConnection(driverField.Text, connectionField.Text) Then
                        generateAuto()
                    End If
                End If
            End If
        Catch ex As Exception
            errorBox(ex.Message, ex.StackTrace)
        End Try
    End Sub

    Private Sub connectionGrid_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles connectionGrid.CellEndEdit
        Dim factory = DbProviderFactories.GetFactory(driverField.Text)
        Dim connectionFieldTemp As String = ""
        Dim key = connectionGrid.Rows(e.RowIndex).Cells(0).Value
        Dim val = connectionGrid.Rows(e.RowIndex).Cells(1).Value
        If val IsNot Nothing And Not IsDBNull(val) AndAlso (val <> "" And val <> " ") Then
            If val.ToString() <> factory.CreateConnectionStringBuilder().Item(key).ToString() Then
                connectionFieldTemp += $"{key}={val};"
            End If
        End If
        connectionField.Text += connectionFieldTemp
    End Sub

    Private Sub NewWindowToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NewWindowToolStripMenuItem.Click
        Dim newF1 = New Form1()
        newF1.Show()
    End Sub

    Private Sub NewTabToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NewTabToolStripMenuItem.Click
        addTab()
    End Sub

    Private Sub RemoveTabToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles RemoveTabToolStripMenuItem.Click
        removeTab()
    End Sub

    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Me.queryEditor = New FastColoredTextBox()
        'logView.BackColor = hexToColor("#252526")
        'logView.ForeColor = Color.White
        queryEditor.BorderStyle = BorderStyle.None
        'logView.IndentBackColor = hexToColor("#252526")
        queryEditor.Dock = System.Windows.Forms.DockStyle.Fill
        queryEditor.Parent = queryHolder
        queryEditor.Paddings = New Padding(0)
        queryEditor.Margin = New Padding(0)
        queryEditor.BringToFront()
        queryEditor.Language = Language.SQL
        SplitContainer1.Orientation = My.Settings.SplitPos

        Dim driversTable = DbProviderFactories.GetFactoryClasses()
        For Each row In driversTable.Rows
            If row("Name").ToString().Contains("CData") Then
                driverField.Items.Add(row("InvariantName"))
            End If
        Next
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Clipboard.SetText(connectionField.Text)
    End Sub

    Private Sub ToolStripMenuItem2_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem2.Click
        getSelected().format()
    End Sub

    Private Sub ToolStripMenuItem3_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem3.Click
        My.Settings.FromatExecute = ToolStripMenuItem3.Checked
        My.Settings.Save()
    End Sub

    Private Sub connectionField_TextChanged(sender As Object, e As EventArgs) Handles connectionField.TextChanged
        Dim allProperties = connectionField.Text.Split(";")
        Dim factory = DbProviderFactories.GetFactory(driverField.Text)
        For Each props In allProperties
            Try
                Dim prop = props.Split("=")
                If connectionProperty.ContainsKey(prop(0)) Then
                    Dim index = connectionProperty(prop(0))
                    connectionGrid.Rows(index).Cells(1).Value = prop(1)
                    'connectionGrid.Rows(index).Cells(0).Style.Font = New Font("Microsoft Sans Serif", 8, FontStyle.Bold)
                End If
            Catch ex As Exception

            End Try
        Next
    End Sub

    Private Sub ConnectionHistoryToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ConnectionHistoryToolStripMenuItem.Click
        addHistoryTab()
    End Sub

    Private Sub AddLogVerbosity3ToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AddLogVerbosity3ToolStripMenuItem.Click
        Dim desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop)
        Dim today = Date.Now()
        Dim driverName = driverField.Text.Split(".")(3)
        Dim path = $"{desktopPath}\CDataLogs\{driverName}"
        If Not System.IO.Directory.Exists(path) Then
            System.IO.Directory.CreateDirectory(path)
        End If
        propertyConnectionString("Logfile", $"{path}\{driverName}_{today.ToString("yyyy-MM-dd")}.log")
        propertyConnectionString("Verbosity", $"3")
    End Sub

    Private Sub AddLogVerbosity5ToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AddLogVerbosity5ToolStripMenuItem.Click
        Dim desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop)
        Dim today = Date.Now()
        Dim driverName = driverField.Text.Split(".")(3)
        Dim path = $"{desktopPath}\CDataLogs\{driverName}"
        If Not System.IO.Directory.Exists(path) Then
            System.IO.Directory.CreateDirectory(path)
        End If
        propertyConnectionString("Logfile", $"{path}\{driverName}_{today.ToString("yyyy-MM-dd")}.log")
        propertyConnectionString("Verbosity", $"5")
    End Sub

    'Private Sub tabHolder_DrawItem(sender As Object, e As DrawItemEventArgs) Handles tabHolder.DrawItem
    '    Dim tabPage = Me.tabHolder.TabPages(e.Index)
    '    Dim tabRect = Me.tabHolder.GetTabRect(e.Index)
    '    tabRect.Inflate(-2, -2)

    '    If e.Index = Me.tabHolder.TabCount - 1 Then
    '        Dim addImage = My.Resources.addTab
    '        e.Graphics.DrawImage(addImage, Convert.ToSingle(tabRect.Left + (tabRect.Width - addImage.Width) / 2), Convert.ToSingle(tabRect.Top + (tabRect.Height - addImage.Height) / 2))
    '    Else
    '        Dim closeImage = My.Resources.closeTab
    '        e.Graphics.DrawImage(closeImage, Convert.ToSingle(tabRect.Right - closeImage.Width), Convert.ToSingle(tabRect.Top + (tabRect.Height - closeImage.Height) / 2))
    '        TextRenderer.DrawText(e.Graphics, tabPage.Text, tabPage.Font, tabRect, tabPage.ForeColor, TextFormatFlags.Left)
    '    End If
    'End Sub

    Private Sub tabHolder_Selecting(ByVal sender As Object, ByVal e As TabControlCancelEventArgs) Handles tabHolder.Selecting
        If e.TabPageIndex = 0 Then
            addTab()
            tabHolder.SelectedIndex = tabHolder.TabCount
        ElseIf e.TabPageIndex = 1 Then
            tabCount -= 1
            tabHolder.TabPages.RemoveAt(oldTabSelected)
            If oldTabSelected = 2 Then
                addTab()
            End If
        Else
            oldTabSelected = e.TabPageIndex
        End If
    End Sub

    Private Sub tabHolder_Selected(sender As Object, e As TabControlEventArgs) Handles tabHolder.Selected
        If sender.SelectedIndex = 1 Then
            tabHolder.SelectedIndex = tabHolder.TabCount - 1
        End If
    End Sub

    'Private Sub tabHolder_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)

    '    'Handles tabHolder.MouseDown
    '    Dim lastIndex = Me.tabHolder.TabCount - 1

    '    If Me.tabHolder.GetTabRect(lastIndex).Contains(e.Location) Then
    '        addTab()
    '        Me.tabHolder.SelectedIndex = lastIndex
    '    Else
    '        For i = 0 To Me.tabHolder.TabPages.Count - 1
    '            Dim tabRect = Me.tabHolder.GetTabRect(i)
    '            tabRect.Inflate(-2, -2)
    '            Dim closeImage = My.Resources.closeTab
    '            Dim imageRect = New Rectangle((tabRect.Right - closeImage.Width), tabRect.Top + (tabRect.Height - closeImage.Height) / 2, closeImage.Width, closeImage.Height)

    '            If imageRect.Contains(e.Location) Then
    '                If tabHolder.SelectedTab.Text <> $"Connection History" Then
    '                    tabCount -= 1
    '                Else
    '                    historyOpened = False
    '                End If
    '                Me.tabHolder.TabPages.RemoveAt(i)
    '                Exit For
    '            End If
    '        Next
    '    End If
    'End Sub

    Private Sub FullDBToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles FullDBToolStripMenuItem.Click
        If Not viewerOpened Then
            Dim page = New TabPage($"Viewer")
            page.Name = page.Text
            page.Controls.Add(New viewerTab With {.Visible = True, .Dock = DockStyle.Fill})
            tabHolder.TabPages.Add(page)
            viewerOpened = True
        End If
        Dim vT1 As TabPage = tabHolder.TabPages($"Viewer")
        vT1.Controls(0).GetType().GetMethod("fullDB").Invoke(vT1.Controls(0), Nothing)

        tabHolder.SelectedTab = tabHolder.TabPages($"Viewer")
    End Sub

    Private Sub CloseToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CloseToolStripMenuItem.Click
        If viewerOpened Then
            tabHolder.TabPages.Remove(tabHolder.TabPages($"Viewer"))
            viewerOpened = False
        End If
    End Sub

    Private Sub connectionGrid_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles connectionGrid.CellContentClick

    End Sub

    Private Sub connectionGrid_CellPainting(sender As Object, e As DataGridViewCellPaintingEventArgs) Handles connectionGrid.CellPainting
        If e.RowIndex <> -1 AndAlso connectionGrid.Rows(e.RowIndex).Cells(0).Value.ToString().Contains("# ") Then
            If e.ColumnIndex = 0 Then
                e.AdvancedBorderStyle.Right = DataGridViewAdvancedCellBorderStyle.None
            End If
            connectionGrid.Rows(e.RowIndex).ReadOnly = True
            e.CellStyle.Font = New Font("Microsoft Sans Serif", 9, FontStyle.Bold)
            e.CellStyle.BackColor = SystemColors.Control
            e.CellStyle.SelectionBackColor = e.CellStyle.BackColor
            e.CellStyle.SelectionForeColor = Color.Black
        ElseIf e.RowIndex = -1 Then
            e.CellStyle.BackColor = SystemColors.Control
        End If
    End Sub

    Private Sub ToolStripMenuItem2_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem2.Click
        queryEditor.Text = $"Select * From sys_tablecolumns"
    End Sub

    Private Sub driverField_DropDown(sender As Object, e As EventArgs) Handles driverField.DropDown
        driverField.Items.Clear()
        Dim driversTable = DbProviderFactories.GetFactoryClasses()
        For Each row In driversTable.Rows
            If row("Name").ToString().Contains("CData") Then
                driverField.Items.Add(row("InvariantName"))
            End If
        Next
    End Sub

    Private Sub NewWindowToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NewWindowToolStripMenuItem.Click
        Dim newForm As New Form1
        newForm.Show()
    End Sub
End Class
